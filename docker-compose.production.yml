version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0-jammy
    container_name: kinect-db-prod
    restart: unless-stopped
    volumes:
      - mongodb-data:/data/db
      - ./backups:/backups
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    environment:
      - MONGO_INITDB_DATABASE=kinect
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    networks:
      - kinect-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/kinect --quiet
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Backend API
  backend:
    build: 
      context: .
      dockerfile: ./backend/Dockerfile.selfhosted
    container_name: kinect-api-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/kinect?authSource=admin
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - DATA_ENCRYPTION_KEY=${DATA_ENCRYPTION_KEY}
      
      # Production Security
      - SELF_HOSTED=true
      - ENABLE_TELEMETRY=false
      - ENABLE_ANALYTICS=false
      - ALLOW_REGISTRATION=${ALLOW_REGISTRATION:-false}
      - CORS_ORIGIN=${FRONTEND_URL:-http://localhost:3000}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      
      # Email Configuration (Production SMTP)
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      
      # Reminder Configuration
      - REMINDER_CRON_ENABLED=true
      - REMINDER_CHECK_INTERVAL=${REMINDER_CHECK_INTERVAL:-0 9 * * *}
      - ENABLE_EMAIL_REMINDERS=${ENABLE_EMAIL_REMINDERS:-true}
      
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - kinect-network
    volumes:
      - ./imports:/app/imports
      - ./exports:/app/exports
      - ./backups:/app/backups
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web Application
  frontend:
    build:
      context: .
      dockerfile: ./frontend-web/Dockerfile.selfhosted
      args:
        - VITE_API_URL=${VITE_API_URL:-/api}
        - VITE_SELF_HOSTED=true
        - VITE_APP_NAME=${APP_NAME:-Kinect}
        - VITE_APP_VERSION=${APP_VERSION:-latest}
    container_name: kinect-web-prod
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - kinect-network
    environment:
      - NGINX_HOST=${DOMAIN_NAME:-localhost}
      - NGINX_PORT=80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Production SMTP Relay (Optional)
  mailrelay:
    image: boky/postfix:v3.7.0
    container_name: kinect-mail-relay
    profiles: ["email"]
    environment:
      - ALLOWED_SENDER_DOMAINS=${ALLOWED_SENDER_DOMAINS}
      - HOSTNAME=${MAIL_HOSTNAME:-mail.${DOMAIN_NAME:-localhost}}
      - RELAYHOST=${EXTERNAL_SMTP_HOST}:${EXTERNAL_SMTP_PORT:-587}
      - RELAYHOST_USERNAME=${EXTERNAL_SMTP_USER}
      - RELAYHOST_PASSWORD=${EXTERNAL_SMTP_PASS}
    networks:
      - kinect-network
    restart: unless-stopped

  # Backup Service
  backup:
    image: mongo:7.0-jammy
    container_name: kinect-backup-prod
    profiles: ["backup"]
    volumes:
      - mongodb-data:/data/db:ro
      - ./backups:/backups
      - ./scripts/backup-production.sh:/backup.sh:ro
    networks:
      - kinect-network
    environment:
      - MONGO_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
    command: ["/bin/bash", "/backup.sh"]
    depends_on:
      - mongodb

  # Monitoring (Optional)
  monitoring:
    image: prom/node-exporter:latest
    container_name: kinect-monitoring
    profiles: ["monitoring"]
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

  # Auto-updater (Optional)
  watchtower:
    image: containrrr/watchtower
    container_name: kinect-updater-prod
    profiles: ["auto-update"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_SCHEDULE=${UPDATE_SCHEDULE:-0 0 3 * * SUN}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
    command: kinect-web-prod kinect-api-prod
    restart: unless-stopped

networks:
  kinect-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  mongodb-data:
    driver: local
  ssl-certs:
    driver: local
  backup-data:
    driver: local