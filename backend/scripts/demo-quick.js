#!/usr/bin/env node
/**
 * Quick 5-Minute Reminder Demo
 * 
 * Simplified version for fast testing
 */

const mongoose = require('mongoose');
const nodemailer = require('nodemailer');

async function quickDemo() {
  console.log('üöÄ KINECT REMINDER DEMO - Quick Test (5 minutes)');
  console.log('===============================================\n');

  try {
    // 1. Services Check
    console.log('‚úÖ Services Check:');
    
    // Check MongoDB
    try {
      await mongoose.connect('mongodb://localhost:27017/kinect-quick-demo');
      console.log('  - MongoDB: Connected');
    } catch (error) {
      throw new Error('MongoDB not running. Please start MongoDB first.');
    }

    // Check MailHog
    const transporter = nodemailer.createTransport({
      host: 'localhost',
      port: 1025,
      secure: false
    });
    
    try {
      await transporter.verify();
      console.log('  - MailHog: Running on http://localhost:8025');
    } catch (error) {
      throw new Error('MailHog not running. Please run: docker run -d -p 1025:1025 -p 8025:8025 mailhog/mailhog');
    }

    console.log('  - Backend: http://localhost:3001\n');

    // 2. Create Test Data
    console.log('üìù Creating Test Data:');
    
    const UserSchema = new mongoose.Schema({
      email: String,
      firstName: String,
      lastName: String
    });

    const ContactSchema = new mongoose.Schema({
      userId: String,
      firstName: String,
      lastName: String,
      email: String,
      lastContactDate: Date,
      customReminderDays: Number
    });

    const User = mongoose.model('QuickUser', UserSchema);
    const Contact = mongoose.model('QuickContact', ContactSchema);

    // Clear and create
    await User.deleteMany({});
    await Contact.deleteMany({});

    const user = await User.create({
      email: 'sarah@example.com',
      firstName: 'Sarah',
      lastName: 'Johnson'
    });

    const contacts = await Contact.insertMany([
      {
        userId: user._id.toString(),
        firstName: 'John',
        lastName: 'Smith',
        email: 'john@example.com',
        lastContactDate: new Date(Date.now() - 35 * 24 * 60 * 60 * 1000), // 35 days ago
        customReminderDays: 30
      },
      {
        userId: user._id.toString(),
        firstName: 'Emma',
        lastName: 'Wilson',
        email: 'emma@example.com',
        lastContactDate: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000), // 15 days ago
        customReminderDays: 10
      }
    ]);

    console.log(`  - User: ${user.firstName} ${user.lastName} (${user.email})`);
    console.log(`  - Contact: John Smith (35 days overdue, 30-day reminder)`);
    console.log(`  - Contact: Emma Wilson (15 days overdue, 10-day custom reminder)\n`);

    // 3. Process Reminders
    console.log('üìß Triggering Reminders:');
    
    const now = new Date();
    const overdueContacts = contacts.filter(contact => {
      const daysSince = Math.floor((now - contact.lastContactDate) / (1000 * 60 * 60 * 24));
      const threshold = contact.customReminderDays || 30;
      return daysSince > threshold;
    }).map(contact => {
      const daysSince = Math.floor((now - contact.lastContactDate) / (1000 * 60 * 60 * 24));
      return {
        name: `${contact.firstName} ${contact.lastName}`,
        daysSince
      };
    });

    console.log('  - Processing overdue contacts...');
    
    if (overdueContacts.length > 0) {
      const emailContent = {
        from: 'Kinect Reminders <demo@kinect.app>',
        to: user.email,
        subject: 'Time to reconnect with your contacts!',
        html: `
          <h2>Hi ${user.firstName}!</h2>
          <p>You have contacts you haven't spoken to in a while:</p>
          <ul>
            ${overdueContacts.map(contact => `<li><strong>${contact.name}</strong> - ${contact.daysSince} days since last contact</li>`).join('')}
          </ul>
          <p>Consider reaching out to maintain your relationships!</p>
          <hr>
          <small>Generated by Kinect Demo</small>
        `
      };

      await transporter.sendMail(emailContent);
      console.log(`  - Email sent to ${user.email}`);
      console.log(`  - ${overdueContacts.length} contacts included in reminder\n`);
    }

    // 4. Results
    console.log('üåê View Results:');
    console.log('  - Open: http://localhost:8025');
    console.log(`  - Check inbox for: ${user.email}`);
    console.log('  - Subject: "Time to reconnect with your contacts!"\n');

    console.log('‚úÖ Demo Complete! Check MailHog to see the actual email.');

    await mongoose.disconnect();

  } catch (error) {
    console.error(`‚ùå Demo failed: ${error.message}`);
    if (mongoose.connection.readyState !== 0) {
      await mongoose.disconnect();
    }
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  quickDemo();
}

module.exports = quickDemo;